View(metadata)
df <- as.data.frame(colData(dds)[,c("Condition","GrowthCondition")])
View(df)
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE)
pheatmap(assay(ntd)[select,], cluster_rows=TRUE, show_rownames=FALSE,
cluster_cols=TRUE)
pheatmap(assay(ntd)[select,], cluster_rows=TRUE, show_rownames=FALSE,
cluster_cols=TRUE,annotation_col=df)
pheatmap(assay(ntd)[select,], cluster_rows=TRUE, show_rownames=FALSE,
cluster_cols=FALSE,annotation_col=df)
df
df <- as.data.frame(colData(dds)[,"Condition")])
df <- as.data.frame(colData(dds)[,"Condition")])
df <- as.data.frame(colData(dds)[,"Condition"])
pheatmap(assay(ntd)[select,], cluster_rows=TRUE, show_rownames=FALSE,
cluster_cols=FALSE,annotation_col=df)
pheatmap(assay(ntd)[select,], cluster_rows=TRUE, show_rownames=FALSE,
cluster_cols=TRUE,annotation_col=df)
df
pheatmap(assay(ntd)[select,], cluster_rows=TRUE, show_rownames=FALSE,
cluster_cols=TRUE,annotation_col=df, show_colnames = TRUE)
pheatmap(assay(ntd)[select,], cluster_rows=TRUE, show_rownames=FALSE,
cluster_cols=TRUE, show_colnames = TRUE) #annotation_col=df,
help(pheatmap)
pheatmap(assay(ntd)[select,], cluster_rows=TRUE, show_rownames=FALSE,
cluster_cols=TRUE, show_colnames = T) #annotation_col=df,
assay(ntd)[select,]
length(assay(ntd)[select,])
length(,assay(ntd)[select,])
length(assay(ntd)[select,][1,])
cluster = assay(ntd)[select,]
cluster
colnames(cluster)
colnames(cluster)
View(dQ_snf5_Dex_v_Starve_pH_5)
View(dds)
dds$coldata
dds(matrix)
samples
samples$sample
cluster = assay(ntd)[select,]
rownames(cluster)= samples$sample
as.character(samples$sample)
colnamesnames(cluster)= as.character(samples$sample)
colnames(cluster)= as.character(samples$sample)
pheatmap(cluster, cluster_rows=TRUE, show_rownames=FALSE,
cluster_cols=TRUE, show_colnames = T)
colnames(cluster)= as.character(samples$sample)
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T)
rownames(cluster)
View(tx2gene)
View(t2g)
t2g[rownames(cluster),]
t2g[rownames(cluster),2]
rownames(cluster)
t2g
as.character(t2g)
test = as.character(t2g)
test
a = t2g[,2]
a
a = t2g[,2][rownames(cluster)]
a
rownames(custer)
rownames(cluster)
help(which)
which(t2g[,2],rownames(cluster))
intersect(t2g[,2],rownames(cluster))
subset(t2g[,2],rownames(cluster))
t2g[,2][rownames(cluster)]
t2g[1,2][rownames(cluster)]
t2g[,2]["YKR097W"]
t2g[,1]["YKR097W"]
t2g[,3]["YKR097W"]
a = t2g[,2]
a["YKR097W"]
t2g$target_id
t2g$target_id[a]
which(t2g$target_id[a])
which(t2g$target_id[a], drop.NA = true)
dplyr::filter(t2g, target_id = rownames(cluster))
dplyr::filter(t2g, target_id =+ rownames(cluster))
dplyr::filter(t2g, target_id == rownames(cluster))
mtcars[grep(rownames(cluster)), t2g[2], ]
t2g[grep(rownames(cluster)), t2g[2], ]
a = rownames(cluster)
a
whos(a)
typeof(a)
t2g[grep(a), t2g[2], ]
t2g[,2]
a= t2g[,2]
typeof(a)
b = rownames(cluster)
a[b]
b[a]
b[a, drop = T]
b[a, drop = F]
sum(b[a, drop = F])
t2g[b[a, drop = F],]
help([])
t2g[b[a, drop = F],]shared_results <- t2g[t2g[,2] %in% rownames(cluster),]
shared_results <- t2g[t2g[,2] %in% rownames(cluster),]
View(shared_results)
a = paste(shared_results[3], "_",shared_results[1])
a
for(i in 1:length(shared_results)){
a[i] = paste(shared_results[i,3], "_",shared_results[i,1])
}
a
for(i in 1:length(shared_results[,1])){
a[i] = paste(shared_results[i,3], "_",shared_results[i,1])
}
for(i in 1:length(shared_results[,1])){
a[i] = paste(shared_results[i,3], "_",shared_results[i,1], sep = "")
}
rownames(cluster)
a
cluster
View(shared_results)
shared_results[,1]
colnames(cluster)[shared_results[,1]]
sort(shared_results)
sort(shared_results[,1])
typeof(shared_results
)
View(shared_results)
View(shared_results)
shared_results
shared_results[1]
shared_results[2]
shared_results[3]
a = as.matrix(shared_results)
a
View(a)
a[1]
a[2]
a[2,1]
a[2,3]
a[1,3]
new_df <- a[ order(a[,1]), ]
View(new_df)
View(a)
cluster <- cluster[ order(row.names(cluster)), ]
View(a)
View(cluster)
cluster = assay(ntd)[select,] # making an object out of genes to be clusterd
colnames(cluster)= as.character(samples$sample) #giving colnames to clustered object
shared_results <- t2g[t2g[,2] %in% rownames(cluster),] # subsetting genes to transcripts mapping to add gene names to heatmap
a = as.matrix(shared_results)
ordered_genes_mapping <- a[ order(a[,1]), ]# ordering genes mapping
cluster <- cluster[ order(row.names(cluster)), ] # orderign cluster rownames so that they are in the same order as the gene names we have selected
for(i in 1:length(ordered_genes_mapping[,1])){
common_and_ens_ids[i] = paste(ordered_genes_mapping[i,3], "_",ordered_genes_mapping[i,1], sep = "")
}
common_and_ens_ids = []
for(i in 1:length(ordered_genes_mapping[,1])){
common_and_ens_ids[i] = paste(ordered_genes_mapping[i,3], "_",ordered_genes_mapping[i,1], sep = "")
}
common_and_ens_ids = dataframe()
common_and_ens_ids = dataFrame()
common_and_ens_ids = matrix()
for(i in 1:length(ordered_genes_mapping[,1])){
common_and_ens_ids[i] = paste(ordered_genes_mapping[i,3], "_",ordered_genes_mapping[i,1], sep = "")
}
View(cluster)
rownames(cluster) = common_and_ens_ids
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T) #annotation_col=df,
df <- as.data.frame(colData(dds)[,"Condition"])
df
View(cluster)
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T,annotation_col=df)
df <- as.data.frame(colData(dds)[,"Condition"])
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T,annotation_col=df)
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T)
df = factor(df)
for(i in 2:length(samplesdata)){
samplesdata[i] = factor(samplesdata[,i])
}
df
df = factor(df[1])
df = factor(df[,1])
df
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T, annotation_col = df)
length(df)
df
df
typeof(df)
df
df <- as.data.frame(as.character(colData(dds)[,"Condition"])
)
df
df = factor(df[,1])
df
typeof(df)
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T, annotation_col = df) #annotation_col=df,
aka2 = data.frame(ID = factor(rep(c("Pat","Trea","test"), each=5)))
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T, annotation_col = aka2)
aka2
aka2 = data.frame(ID = factor(rep(c("Pat","Trea","test","test2","test3"), each=7)))
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T, annotation_col = aka2)
aka2
length(cluster)
length(cluster[,1])
length(cluster[1,])
View(cluster)
test = matrix(rnorm(200), 20, 10)
test[1:10, seq(1, 10, 2)] = test[1:10, seq(1, 10, 2)] + 3
test[11:20, seq(2, 10, 2)] = test[11:20, seq(2, 10, 2)] + 2
test[15:20, seq(2, 10, 2)] = test[15:20, seq(2, 10, 2)] + 4
colnames(test) = paste("Test", 1:10, sep = "")
rownames(test) = paste("Gene", 1:20, sep = "")
annotation_col = data.frame(
CellType = factor(rep(c("CT1", "CT2"), 5)),
Time = 1:5
)
pheatmap(test, annotation_col = annotation_col)
test
pheatmap(test, annotation_col = annotation_col)
pheatmap(abs(test), annotation_col = annotation_col)
pheatmap(test, annotation_col = annotation_col, annotation_legend = FALSE)
aka2
aka2 = data.frame(Condition = factor(rep(c("Pat","Trea","test","test2","test3"), each=7)))
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T, annotation_col = aka2)
aka2 = data.frame(Condition = factor(rep(c("Pat","Trea","test","test2","test3"), each=7)))
rownames(aka2) <- colnames(cluster)
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T, annotation_col = aka2) #annotation_col=df,
rownames(df) <- colnames(cluster)
df <- as.data.frame(as.character(colData(dds)[,"Condition"]))
df = factor(df[,1])
df
rownames(df) <- colnames(cluster)
df <- as.data.frame(as.character(colData(dds)[,"Condition"]))
rownames(df) <- colnames(cluster)
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T, annotation_col = df) #annotation_col=df,
df <- as.data.frame(as.character(colData(dds)[,c("Condition","GrowthCondition")]))
df <- as.data.frame(as.character(colData(dds)[,c("Condition","GrowthCondition")]))
df <- as.data.frame(colData(dds)[,c("Condition","GrowthCondition")])
df
rownames(df) <- colnames(cluster)
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T, annotation_col = df) #annotation_col=df,
WT_Dex_v_Starve_pH_7 = WT_Dex_v_Starve_pH_7[order(WT_Dex_v_Starve_pH_7$padj),]
WT_Dex_v_Starve_pH_5 = WT_Dex_v_Starve_pH_5[order(WT_Dex_v_Starve_pH_5$padj),]
dQ_snf5_Dex_v_Starve_pH_5 = dQ_snf5_Dex_v_Starve_pH_5[order(dQ_snf5_Dex_v_Starve_pH_5$padj),]
Null_Dex_v_Starve = Null_Dex_v_Starve[order(Null_Dex_v_Starve$padj),]
HtoA_snf5_Dex_v_Starve_pH_5 = HtoA_snf5_Dex_v_Starve_pH_5[order(HtoA_snf5_Dex_v_Starve_pH_5$padj),]
#Can also use interactions: Interaction terms can be added to the design formula, in order to test, for example,
#if the log2 fold change attributable to a given condition is different based on another
#factor, for example if the condition effect differs across genotype.
# Now filtering by padj value
WT_Dex_v_Starve_pH_7_sig = WT_Dex_v_Starve_pH_7[WT_Dex_v_Starve_pH_7$padj < 0.05,]
WT_DEX_v_starve_pH_5_sig = WT_Dex_v_Starve_pH_5[WT_Dex_v_Starve_pH_5$padj < 0.05,]
dQ_snf5_Dex_v_Starve_pH_5_sig = dQ_snf5_Dex_v_Starve_pH_5[dQ_snf5_Dex_v_Starve_pH_5$padj < 0.05,]
Null_Dex_v_Starve_sig = Null_Dex_v_Starve[Null_Dex_v_Starve$padj < 0.05,]
HtoA_snf5_Dex_v_Starve_pH_5_sig = HtoA_snf5_Dex_v_Starve_pH_5[HtoA_snf5_Dex_v_Starve_pH_5$padj < 0.05,]
#filter log2FC over 1 (two-fold)
WT_Dex_v_Starve_pH_7_sig = WT_Dex_v_Starve_pH_7[abs(WT_Dex_v_Starve_pH_7$log2FoldChange) > 1,]
WT_DEX_v_starve_pH_5_sig = WT_Dex_v_Starve_pH_5[abs(WT_Dex_v_Starve_pH_5$log2FoldChange) > 1,]
dQ_snf5_Dex_v_Starve_pH_5_sig = dQ_snf5_Dex_v_Starve_pH_5[abs(dQ_snf5_Dex_v_Starve_pH_5$log2FoldChange) > 1,]
Null_Dex_v_Starve_sig = Null_Dex_v_Starve[abs(Null_Dex_v_Starve$log2FoldChange) > 1,]
HtoA_snf5_Dex_v_Starve_pH_5_sig = HtoA_snf5_Dex_v_Starve_pH_5[abs(HtoA_snf5_Dex_v_Starve_pH_5$log2FoldChange) > 1,]
# Writing the list to CSV
write.table(as.data.frame(WT_Dex_v_Starve_pH_7_sig), file="WT_Dex_v_Starve_pH_7_sig.txt", sep ="\t")
write.table(as.data.frame(WT_DEX_v_starve_pH_5_sig), file="WT_DEX_v_starve_pH_5_sig.txt", sep ="\t")
write.table(as.data.frame(dQ_snf5_Dex_v_Starve_pH_5_sig), file="dQ_snf5_Dex_v_Starve_pH_5_sig.txt", sep ="\t")
write.table(as.data.frame(Null_Dex_v_Starve_sig), file="Null_Dex_v_Starve_sig.txt", sep ="\t")
write.table(as.data.frame(HtoA_snf5_Dex_v_Starve_pH_5_sig), file="HtoA_snf5_Dex_v_Starve_pH_5_sig.txt", sep ="\t")
summary(WT_DEX_v_starve_pH_5_sig)
summary(WT_DEX_v_starve_pH_7_sig)
summary(WT_Dex_v_Starve_pH_7_sig)
tmp = installed.packages()
installedpackages = as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpackages, file="~/Desktop/installed_packages.rda")
R version
install.packages("tximportData", dependencies=TRUE, repos='http://cran.rstudio.com/')
save(dds,file="~/Desktop/dds.rda")
View(samples)
samplesdata
samplesdata$sample
View(txi)
View(txi)
samples
sampelsdata
sampledata
df
cluster
typeof(cluster)
load('dds.rda') #from wherever you saved the data structure (should automatically save in prepare)----
DESeq2Clusterplot = function(filepath='/Users/gbrittingham/Documents/R/R_from macpro/Kallisto_
DESeq2_Scripts_RNASeq_12.18.17/Results/DESeq2/Sig_Dif_expressed_genes/
WT_DEX_v_starve_pH_5_sig.txt', filename='WT_DEX_v_starve_pH_5_sig', numbergenes = 25,
DESeq2_Object = dds, sampledata = sampledata){
load('dds.rda') #from wherever you saved the data structure (should automatically save in prepare)----
# create filenames
filename = read.table(filepath, sep = "\t", header = TRUE)
filenameup = paste(filename,"upinstarve","_",numbergenes, sep = "")
filenamedown = paste(filename,"downinstarve","_",numbergenes, sep = "")
#filter SigGene lists into up and downregulated genes and cut by number desired ----
filenamedown = filename[order(filename$log2FoldChange),][1:numbergenes,]
filenameup = filename[order(filename$log2FoldChange, decreasing = TRUE),][1:numbergenes,]
#create master list of all genes you selected ----
select = c(rownames(filenameup), rownames(filenamedown))
#create transformation to have a more reasonable distribution of data----
ntd <- normTransform(dds) # can probably play with different normalizations here
cluster = assay(ntd)[select,] # making matrix with gene names and gene counts
colnames(cluster)= as.character(sampledata$sample) #giving colnames to clustered object using the 'sampledata' variable created in the prepare script
# Adding common names to ens_ids for genes ----
shared_results <- t2g[t2g[,2] %in% rownames(cluster),] # Select rownames in the 'gene mapping' matrix that are also in our clustering matrix
a = as.matrix(shared_results)
ordered_genes_mapping <- a[ order(a[,1]), ]# ordering genes mapping so that the rownames in cluster to be alphabetical
cluster <- cluster[ order(row.names(cluster)), ] # order genes in cluster to be alphabetical (will be important below)
common_and_ens_ids = matrix()  # create matrix to hold a pasted name containing common and ens_id names for a gene
for(i in 1:length(ordered_genes_mapping[,1])){
common_and_ens_ids[i] = paste(ordered_genes_mapping[i,3], "_",ordered_genes_mapping[i,1], sep = "")
}# paste together each common name with the ens_id (will make heatmap easier to read)
rownames(cluster) = common_and_ens_ids # now our cluster rownames contain common names if available
#create annotations for top of heatmap ----
df <- as.data.frame(colData(dds)[,c("Condition","GrowthCondition")])
rownames(df) <- colnames(cluster)
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T, annotation_col = df)
}
DESeq2Clusterplot()
getwd()
setwd('/Users/HoltLab/Documents/R/Scripts/Kallisto_DESeq2_Scripts_RNASeq_12.18.17')
DESeq2Clusterplot()
DESeq2Clusterplot = function(filepath='/Users/HoltLab/Documents/R/Experiments/RNA_seq_ADH2_Nacho_12.28.17/Results/DESeq2/Sig_Dif_expressed_genes/
WT_DEX_v_starve_pH_5_sig.txt', filename='WT_DEX_v_starve_pH_5_sig', numbergenes = 25,
DESeq2_Object = dds, sampledata = sampledata){
load('dds.rda') #from wherever you saved the data structure (should automatically save in prepare)----
# create filenames
filename = read.table(filepath, sep = "\t", header = TRUE)
filenameup = paste(filename,"upinstarve","_",numbergenes, sep = "")
filenamedown = paste(filename,"downinstarve","_",numbergenes, sep = "")
#filter SigGene lists into up and downregulated genes and cut by number desired ----
filenamedown = filename[order(filename$log2FoldChange),][1:numbergenes,]
filenameup = filename[order(filename$log2FoldChange, decreasing = TRUE),][1:numbergenes,]
#create master list of all genes you selected ----
select = c(rownames(filenameup), rownames(filenamedown))
#create transformation to have a more reasonable distribution of data----
ntd <- normTransform(dds) # can probably play with different normalizations here
cluster = assay(ntd)[select,] # making matrix with gene names and gene counts
colnames(cluster)= as.character(sampledata$sample) #giving colnames to clustered object using the 'sampledata' variable created in the prepare script
# Adding common names to ens_ids for genes ----
shared_results <- t2g[t2g[,2] %in% rownames(cluster),] # Select rownames in the 'gene mapping' matrix that are also in our clustering matrix
a = as.matrix(shared_results)
ordered_genes_mapping <- a[ order(a[,1]), ]# ordering genes mapping so that the rownames in cluster to be alphabetical
cluster <- cluster[ order(row.names(cluster)), ] # order genes in cluster to be alphabetical (will be important below)
common_and_ens_ids = matrix()  # create matrix to hold a pasted name containing common and ens_id names for a gene
for(i in 1:length(ordered_genes_mapping[,1])){
common_and_ens_ids[i] = paste(ordered_genes_mapping[i,3], "_",ordered_genes_mapping[i,1], sep = "")
}# paste together each common name with the ens_id (will make heatmap easier to read)
rownames(cluster) = common_and_ens_ids # now our cluster rownames contain common names if available
#create annotations for top of heatmap ----
df <- as.data.frame(colData(dds)[,c("Condition","GrowthCondition")])
rownames(df) <- colnames(cluster)
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T, annotation_col = df)
}
DESeq2Clusterplot = function(filepath='/Users/HoltLab/Documents/R/Experiments/RNA_seq_ADH2_Nacho_12.28.17/Results/DESeq2/Sig_Dif_expressed_genes/
WT_DEX_v_starve_pH_5_sig.txt', filename='WT_DEX_v_starve_pH_5_sig', numbergenes = 25,
DESeq2_Object = dds, sampledata = sampledata){
load('dds.rda') #from wherever you saved the data structure (should automatically save in prepare)----
# create filenames
filename = read.table(filepath, sep = "\t", header = TRUE)
filenameup = paste(filename,"upinstarve","_",numbergenes, sep = "")
filenamedown = paste(filename,"downinstarve","_",numbergenes, sep = "")
#filter SigGene lists into up and downregulated genes and cut by number desired ----
filenamedown = filename[order(filename$log2FoldChange),][1:numbergenes,]
filenameup = filename[order(filename$log2FoldChange, decreasing = TRUE),][1:numbergenes,]
#create master list of all genes you selected ----
select = c(rownames(filenameup), rownames(filenamedown))
#create transformation to have a more reasonable distribution of data----
ntd <- normTransform(dds) # can probably play with different normalizations here
cluster = assay(ntd)[select,] # making matrix with gene names and gene counts
colnames(cluster)= as.character(sampledata$sample) #giving colnames to clustered object using the 'sampledata' variable created in the prepare script
# Adding common names to ens_ids for genes ----
shared_results <- t2g[t2g[,2] %in% rownames(cluster),] # Select rownames in the 'gene mapping' matrix that are also in our clustering matrix
a = as.matrix(shared_results)
ordered_genes_mapping <- a[ order(a[,1]), ]# ordering genes mapping so that the rownames in cluster to be alphabetical
cluster <- cluster[ order(row.names(cluster)), ] # order genes in cluster to be alphabetical (will be important below)
common_and_ens_ids = matrix()  # create matrix to hold a pasted name containing common and ens_id names for a gene
for(i in 1:length(ordered_genes_mapping[,1])){
common_and_ens_ids[i] = paste(ordered_genes_mapping[i,3], "_",ordered_genes_mapping[i,1], sep = "")
}# paste together each common name with the ens_id (will make heatmap easier to read)
rownames(cluster) = common_and_ens_ids # now our cluster rownames contain common names if available
#create annotations for top of heatmap ----
df <- as.data.frame(colData(dds)[,c("Condition","GrowthCondition")])
rownames(df) <- colnames(cluster)
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T, annotation_col = df)
}
DESeq2Clusterplot = function(filepath='/Users/HoltLab/Documents/R/Experiments/RNA_seq_ADH2_Nacho_12.28.17/Results/DESeq2/Sig_Dif_expressed_genes/
WT_DEX_v_starve_pH_5_sig.txt', filename='WT_DEX_v_starve_pH_5_sig', numbergenes = 25,
DESeq2_Object = dds, sampledata = sampledata){
load('dds.rda') #from wherever you saved the data structure (should automatically save in prepare)----
# create filenames
filename = read.table(filepath, sep = "\t", header = TRUE)
filenameup = paste(filename,"upinstarve","_",numbergenes, sep = "")
filenamedown = paste(filename,"downinstarve","_",numbergenes, sep = "")
#filter SigGene lists into up and downregulated genes and cut by number desired ----
filenamedown = filename[order(filename$log2FoldChange),][1:numbergenes,]
filenameup = filename[order(filename$log2FoldChange, decreasing = TRUE),][1:numbergenes,]
#create master list of all genes you selected ----
select = c(rownames(filenameup), rownames(filenamedown))
#create transformation to have a more reasonable distribution of data----
ntd <- normTransform(dds) # can probably play with different normalizations here
cluster = assay(ntd)[select,] # making matrix with gene names and gene counts
colnames(cluster)= as.character(sampledata$sample) #giving colnames to clustered object using the 'sampledata' variable created in the prepare script
# Adding common names to ens_ids for genes ----
shared_results <- t2g[t2g[,2] %in% rownames(cluster),] # Select rownames in the 'gene mapping' matrix that are also in our clustering matrix
a = as.matrix(shared_results)
ordered_genes_mapping <- a[ order(a[,1]), ]# ordering genes mapping so that the rownames in cluster to be alphabetical
cluster <- cluster[ order(row.names(cluster)), ] # order genes in cluster to be alphabetical (will be important below)
common_and_ens_ids = matrix()  # create matrix to hold a pasted name containing common and ens_id names for a gene
for(i in 1:length(ordered_genes_mapping[,1])){
common_and_ens_ids[i] = paste(ordered_genes_mapping[i,3], "_",ordered_genes_mapping[i,1], sep = "")
}# paste together each common name with the ens_id (will make heatmap easier to read)
rownames(cluster) = common_and_ens_ids # now our cluster rownames contain common names if available
#create annotations for top of heatmap ----
df <- as.data.frame(colData(dds)[,c("Condition","GrowthCondition")])
rownames(df) <- colnames(cluster)
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T, annotation_col = df)
}
DESeq2Clusterplot()
DESeq2Clusterplot = function(filepath='/Users/HoltLab/Documents/R/Experiments/RNA_seq_ADH2_Nacho_12.28.17/Results/DESeq2/Sig_Dif_expressed_genes/WT_DEX_v_starve_pH_5_sig.txt', filename='WT_DEX_v_starve_pH_5_sig', numbergenes = 25,
DESeq2_Object = dds, sampledata = sampledata){
load('dds.rda') #from wherever you saved the data structure (should automatically save in prepare)----
# create filenames
filename = read.table(filepath, sep = "\t", header = TRUE)
filenameup = paste(filename,"upinstarve","_",numbergenes, sep = "")
filenamedown = paste(filename,"downinstarve","_",numbergenes, sep = "")
#filter SigGene lists into up and downregulated genes and cut by number desired ----
filenamedown = filename[order(filename$log2FoldChange),][1:numbergenes,]
filenameup = filename[order(filename$log2FoldChange, decreasing = TRUE),][1:numbergenes,]
#create master list of all genes you selected ----
select = c(rownames(filenameup), rownames(filenamedown))
#create transformation to have a more reasonable distribution of data----
ntd <- normTransform(dds) # can probably play with different normalizations here
cluster = assay(ntd)[select,] # making matrix with gene names and gene counts
colnames(cluster)= as.character(sampledata$sample) #giving colnames to clustered object using the 'sampledata' variable created in the prepare script
# Adding common names to ens_ids for genes ----
shared_results <- t2g[t2g[,2] %in% rownames(cluster),] # Select rownames in the 'gene mapping' matrix that are also in our clustering matrix
a = as.matrix(shared_results)
ordered_genes_mapping <- a[ order(a[,1]), ]# ordering genes mapping so that the rownames in cluster to be alphabetical
cluster <- cluster[ order(row.names(cluster)), ] # order genes in cluster to be alphabetical (will be important below)
common_and_ens_ids = matrix()  # create matrix to hold a pasted name containing common and ens_id names for a gene
for(i in 1:length(ordered_genes_mapping[,1])){
common_and_ens_ids[i] = paste(ordered_genes_mapping[i,3], "_",ordered_genes_mapping[i,1], sep = "")
}# paste together each common name with the ens_id (will make heatmap easier to read)
rownames(cluster) = common_and_ens_ids # now our cluster rownames contain common names if available
#create annotations for top of heatmap ----
df <- as.data.frame(colData(dds)[,c("Condition","GrowthCondition")])
rownames(df) <- colnames(cluster)
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T, annotation_col = df)
}
DESeq2Clusterplot()
normTransform
library("DESeq2")
DESeq2Clusterplot = function(filepath='/Users/HoltLab/Documents/R/Experiments/RNA_seq_ADH2_Nacho_12.28.17/Results/DESeq2/Sig_Dif_expressed_genes/WT_DEX_v_starve_pH_5_sig.txt', filename='WT_DEX_v_starve_pH_5_sig', numbergenes = 25,
DESeq2_Object = dds, sampledata = sampledata){
library("pheatmap")
library("DESeq2")
load('dds.rda') #from wherever you saved the data structure (should automatically save in prepare)----
# create filenames
filename = read.table(filepath, sep = "\t", header = TRUE)
filenameup = paste(filename,"upinstarve","_",numbergenes, sep = "")
filenamedown = paste(filename,"downinstarve","_",numbergenes, sep = "")
#filter SigGene lists into up and downregulated genes and cut by number desired ----
filenamedown = filename[order(filename$log2FoldChange),][1:numbergenes,]
filenameup = filename[order(filename$log2FoldChange, decreasing = TRUE),][1:numbergenes,]
#create master list of all genes you selected ----
select = c(rownames(filenameup), rownames(filenamedown))
#create transformation to have a more reasonable distribution of data----
ntd <- normTransform(dds) # can probably play with different normalizations here
cluster = assay(ntd)[select,] # making matrix with gene names and gene counts
colnames(cluster)= as.character(sampledata$sample) #giving colnames to clustered object using the 'sampledata' variable created in the prepare script
# Adding common names to ens_ids for genes ----
shared_results <- t2g[t2g[,2] %in% rownames(cluster),] # Select rownames in the 'gene mapping' matrix that are also in our clustering matrix
a = as.matrix(shared_results)
ordered_genes_mapping <- a[ order(a[,1]), ]# ordering genes mapping so that the rownames in cluster to be alphabetical
cluster <- cluster[ order(row.names(cluster)), ] # order genes in cluster to be alphabetical (will be important below)
common_and_ens_ids = matrix()  # create matrix to hold a pasted name containing common and ens_id names for a gene
for(i in 1:length(ordered_genes_mapping[,1])){
common_and_ens_ids[i] = paste(ordered_genes_mapping[i,3], "_",ordered_genes_mapping[i,1], sep = "")
}# paste together each common name with the ens_id (will make heatmap easier to read)
rownames(cluster) = common_and_ens_ids # now our cluster rownames contain common names if available
#create annotations for top of heatmap ----
df <- as.data.frame(colData(dds)[,c("Condition","GrowthCondition")])
rownames(df) <- colnames(cluster)
pheatmap(cluster, cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, show_colnames = T, annotation_col = df)
}
DESeq2Clusterplot()
f
d
