library('edgeR')
library('biomaRt')
library('RCurl')
library('gtools')
library('biomaRt')
library('RCurl')
library('gtools')
library('sleuth')
sleuth help()
help(sleuth)
sleuth
Prepare_DESeq2_12.28.17 = function(){
#Load libraries, read in metadata and factor metadata ----
library('tximport')
library('tximportData')
library('DESeq2')
metadata = read.table("IgnaciometadataCombined.txt", sep = "\t", header = TRUE)
metadata$path = as.character(metadata$path)
metadata$Condition = as.factor(metadata$Condition)
# import gene mappings (t2g) ---------------------
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "scerevisiae_gene_ensembl",
host = 'ensembl.org')
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id",
"external_gene_name", "description"), mart = mart)
t2g <- dplyr::rename(t2g, target_id = ensembl_transcript_id,
ens_gene = ensembl_gene_id, ext_gene = external_gene_name)
# extract file paths and append Kallisto abundance.tsv filenames -----
files = metadata[,2]
tx2gene = t2g[,1:2]
for(i in 1:length(files)){
files[i] = paste(files[i],sep ="","/abundance.tsv")
}
# Use 'tximport::tximport' function to load in 'counts' data and add gene mappings to create txi counts / mappings list for use in DEseq2 ------
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene) #, countsFromAbundance = "lengthScaledTPM"
#Don't use scaled by length - DESEq2 takes care of this
#Create 'sampledata' variable with relevant metadata, then factor it ----
sampledata = metadata[,c("sample", "Condition","BiologicalReplicate","GrowthCondition","SequencingRun")]
for(i in 2:length(samplesdata)){
sampledata[i] = factor(sampledata[,i])
}
# Create DESeq2 object ----
dds <- DESeqDataSetFromTximport(txi,
colData = sampledata,
design = ~SequencingRun + GrowthCondition + Condition)
# Filter based on Rows with at least 35 counts ----
keep <- rowSums(counts(dds)) >= 35
dds <- dds[keep,]
#dds$Condition <- relevel(dds$Condition, ref = "WT Dex")
#dds$Condition <- droplevels(dds$Condition) # only for when you are removing some of the data for the analysis
# Run DESeq to create full dds object with fitted models ----
dds = DESeq(dds)
saveRDS(dds, "dds.rda")
}
Prepare_DESeq2_12.28.17()
getwd()
ls
setwd()
setwd('Documents/R/Scripts/Kallisto_DESeq2_Scripts_RNASeq_12.18.17/')
Prepare_DESeq2_12.28.17()
Prepare_DESeq2_12.28.17()
Prepare_DESeq2_12.28.17()
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "scerevisiae_gene_ensembl",
host = 'ensembl.org')
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id",
"external_gene_name", "description"), mart = mart)
t2g <- dplyr::rename(t2g, target_id = ensembl_transcript_id,
ens_gene = ensembl_gene_id, ext_gene = external_gene_name)
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "scerevisiae_gene_ensembl",
host = 'ensembl.org')
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "scerevisiae_gene_ensembl",
host = 'ensembl.org')
Prepare_DESeq2_12.28.17 = function(){
#Load libraries, read in metadata and factor metadata ----
library('tximport')
library('tximportData')
library('DESeq2')
metadata = read.table("IgnaciometadataCombined.txt", sep = "\t", header = TRUE)
metadata$path = as.character(metadata$path)
metadata$Condition = as.factor(metadata$Condition)
# import gene mappings (t2g) --------------------- this is a crucial section but corrently the 'mart' function fails half the time (do it by hand)
# mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
#                          dataset = "scerevisiae_gene_ensembl",
#                          host = 'ensembl.org')
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id",
"external_gene_name", "description"), mart = mart)
t2g <- dplyr::rename(t2g, target_id = ensembl_transcript_id,
ens_gene = ensembl_gene_id, ext_gene = external_gene_name)
# extract file paths and append Kallisto abundance.tsv filenames -----
files = metadata[,2]
tx2gene = t2g[,1:2]
for(i in 1:length(files)){
files[i] = paste(files[i],sep ="","/abundance.tsv")
}
# Use 'tximport::tximport' function to load in 'counts' data and add gene mappings to create txi counts / mappings list for use in DEseq2 ------
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene) #, countsFromAbundance = "lengthScaledTPM"
#Don't use scaled by length - DESEq2 takes care of this
#Create 'sampledata' variable with relevant metadata, then factor it ----
sampledata = metadata[,c("sample", "Condition","BiologicalReplicate","GrowthCondition","SequencingRun")]
for(i in 2:length(samplesdata)){
sampledata[i] = factor(sampledata[,i])
}
# Create DESeq2 object ----
dds <- DESeqDataSetFromTximport(txi,
colData = sampledata,
design = ~SequencingRun + GrowthCondition + Condition)
# Filter based on Rows with at least 35 counts ----
keep <- rowSums(counts(dds)) >= 35
dds <- dds[keep,]
#dds$Condition <- relevel(dds$Condition, ref = "WT Dex")
#dds$Condition <- droplevels(dds$Condition) # only for when you are removing some of the data for the analysis
# Run DESeq to create full dds object with fitted models ----
dds = DESeq(dds)
saveRDS(dds, "dds.rda")
}
Prepare_DESeq2_12.28.17()
Prepare_DESeq2_12.28.17 = function(){
#Load libraries, read in metadata and factor metadata ----
library('tximport')
library('tximportData')
library('DESeq2')
metadata = read.table("IgnaciometadataCombined.txt", sep = "\t", header = TRUE)
metadata$path = as.character(metadata$path)
metadata$Condition = as.factor(metadata$Condition)
# import gene mappings (t2g) --------------------- this is a crucial section but corrently the 'mart' function fails half the time (do it by hand)
# mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
#                          dataset = "scerevisiae_gene_ensembl",
#                          host = 'ensembl.org')
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id",
"external_gene_name", "description"), mart = mart)
t2g <- dplyr::rename(t2g, target_id = ensembl_transcript_id,
ens_gene = ensembl_gene_id, ext_gene = external_gene_name)
# extract file paths and append Kallisto abundance.tsv filenames -----
files = metadata[,2]
tx2gene = t2g[,1:2]
for(i in 1:length(files)){
files[i] = paste(files[i],sep ="","/abundance.tsv")
}
# Use 'tximport::tximport' function to load in 'counts' data and add gene mappings to create txi counts / mappings list for use in DEseq2 ------
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene) #, countsFromAbundance = "lengthScaledTPM"
#Don't use scaled by length - DESEq2 takes care of this
#Create 'sampledata' variable with relevant metadata, then factor it ----
sampledata = metadata[,c("sample", "Condition","BiologicalReplicate","GrowthCondition","SequencingRun")]
for(i in 2:length(sampledata)){
sampledata[i] = factor(sampledata[,i])
}
# Create DESeq2 object ----
dds <- DESeqDataSetFromTximport(txi,
colData = sampledata,
design = ~SequencingRun + GrowthCondition + Condition)
# Filter based on Rows with at least 35 counts ----
keep <- rowSums(counts(dds)) >= 35
dds <- dds[keep,]
#dds$Condition <- relevel(dds$Condition, ref = "WT Dex")
#dds$Condition <- droplevels(dds$Condition) # only for when you are removing some of the data for the analysis
# Run DESeq to create full dds object with fitted models ----
dds = DESeq(dds)
saveRDS(dds, "dds.rda")
}
Prepare_DESeq2_12.28.17()
Prepare_DESeq2_12.28.17 = function(){
#Load libraries, read in metadata and factor metadata ----
library('tximport')
library('tximportData')
library('DESeq2')
metadata = read.table("IgnaciometadataCombined.txt", sep = "\t", header = TRUE)
metadata$path = as.character(metadata$path)
metadata$Condition = as.factor(metadata$Condition)
# import gene mappings (t2g) --------------------- this is a crucial section but corrently the 'mart' function fails half the time (do it by hand)
# mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
#                          dataset = "scerevisiae_gene_ensembl",
#                          host = 'ensembl.org')
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id",
"external_gene_name", "description"), mart = mart)
t2g <- dplyr::rename(t2g, target_id = ensembl_transcript_id,
ens_gene = ensembl_gene_id, ext_gene = external_gene_name)
# extract file paths and append Kallisto abundance.tsv filenames -----
files = metadata[,2]
tx2gene = t2g[,1:2]
for(i in 1:length(files)){
files[i] = paste(files[i],sep ="","/abundance.tsv")
}
# Use 'tximport::tximport' function to load in 'counts' data and add gene mappings to create txi counts / mappings list for use in DEseq2 ------
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene) #, countsFromAbundance = "lengthScaledTPM"
#Don't use scaled by length - DESEq2 takes care of this
#Create 'sampledata' variable with relevant metadata, then factor it ----
sampledata = metadata[,c("sample", "Condition","BiologicalReplicate","GrowthCondition","SequencingRun")]
for(i in 2:length(sampledata)){
sampledata[i] = factor(sampledata[,i])
}
# Create DESeq2 object ----
dds <- DESeqDataSetFromTximport(txi,
colData = sampledata,
design = ~SequencingRun + Condition)
# Filter based on Rows with at least 35 counts ----
keep <- rowSums(counts(dds)) >= 35
dds <- dds[keep,]
#dds$Condition <- relevel(dds$Condition, ref = "WT Dex")
#dds$Condition <- droplevels(dds$Condition) # only for when you are removing some of the data for the analysis
# Run DESeq to create full dds object with fitted models ----
dds = DESeq(dds)
saveRDS(dds, "dds.rda")
}
Prepare_DESeq2_12.28.17()
Prepare_DESeq2_12.28.17 = function(){
#Load libraries, read in metadata and factor metadata ----
library('tximport')
library('tximportData')
library('DESeq2')
metadata = read.table("IgnaciometadataCombined.txt", sep = "\t", header = TRUE)
metadata$path = as.character(metadata$path)
metadata$Condition = as.factor(metadata$Condition)
# import gene mappings (t2g) --------------------- this is a crucial section but corrently the 'mart' function fails half the time (do it by hand)
# mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
#                          dataset = "scerevisiae_gene_ensembl",
#                          host = 'ensembl.org')
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id",
"external_gene_name", "description"), mart = mart)
t2g <- dplyr::rename(t2g, target_id = ensembl_transcript_id,
ens_gene = ensembl_gene_id, ext_gene = external_gene_name)
# extract file paths and append Kallisto abundance.tsv filenames -----
files = metadata[,2]
tx2gene = t2g[,1:2]
for(i in 1:length(files)){
files[i] = paste(files[i],sep ="","/abundance.tsv")
}
# Use 'tximport::tximport' function to load in 'counts' data and add gene mappings to create txi counts / mappings list for use in DEseq2 ------
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene) #, countsFromAbundance = "lengthScaledTPM"
#Don't use scaled by length - DESEq2 takes care of this
#Create 'sampledata' variable with relevant metadata, then factor it ----
sampledata = metadata[,c("sample", "Condition","BiologicalReplicate","GrowthCondition","SequencingRun")]
for(i in 2:length(sampledata)){
sampledata[i] = factor(sampledata[,i])
}
# Create DESeq2 object ----
dds <- DESeqDataSetFromTximport(txi,
colData = sampledata,
design = ~SequencingRun + Condition)
# Filter based on Rows with at least 35 counts ----
keep <- rowSums(counts(dds)) >= 35
dds <- dds[keep,]
#dds$Condition <- relevel(dds$Condition, ref = "WT Dex")
#dds$Condition <- droplevels(dds$Condition) # only for when you are removing some of the data for the analysis
# Run DESeq to create full dds object with fitted models ----
dds = DESeq(dds)
saveRDS(dds, "dds.rda")
saveRDS(sampledata, "sampledata.rda")
}
Prepare_DESeq2_12.28.17()
dds = load('dds.rda')
getwd()
ls
ls()()
ls()
getwd()
load("dds.rda")
loadRDA
loadrda
readRDS(dds.rda)
readRDS('dds.rda')
dds = readRDS('dds.rda')
sampledata = readRDS('sampledata.rda')
#DESeq2 differential gene expression analysis
#Assuming you ran Kallisto_to_DESeq2_prepare.R
# Currently not a function
dds = readRDS('dds.rda')
sampledata = readRDS('sampledata.rda')
# Create Wald Test contrasts ----
WT_Dex_v_Starve_pH_7 = results(dds, contrast=c("Condition","WT_Dex", "WT_Stv_pH7"))
WT_Dex_v_Starve_pH_5 = results(dds, contrast=c("Condition","WT_Dex", "WT_Stv_pH5"))
dQ_snf5_Dex_v_Starve_pH_5 = results(dds, contrast=c("Condition","dQ_snf5_Dex", "dQ_snf5_Stv_pH5" ))
Null_Dex_v_Starve = results(dds, contrast=c("Condition","Null_Dex", "Null_Stv_pH5"))
HtoA_snf5_Dex_v_Starve_pH_5 = results(dds, contrast=c("Condition","HtoA_snf5_Dex", "HtoA_snf5_Stv_pH5"))
#now ordering them from greatest to least FC difference ----
WT_Dex_v_Starve_pH_7 = WT_Dex_v_Starve_pH_7[order(WT_Dex_v_Starve_pH_7$padj),]
WT_Dex_v_Starve_pH_5 = WT_Dex_v_Starve_pH_5[order(WT_Dex_v_Starve_pH_5$padj),]
dQ_snf5_Dex_v_Starve_pH_5 = dQ_snf5_Dex_v_Starve_pH_5[order(dQ_snf5_Dex_v_Starve_pH_5$padj),]
Null_Dex_v_Starve = Null_Dex_v_Starve[order(Null_Dex_v_Starve$padj),]
HtoA_snf5_Dex_v_Starve_pH_5 = HtoA_snf5_Dex_v_Starve_pH_5[order(HtoA_snf5_Dex_v_Starve_pH_5$padj),]
#Can also use interactions: Interaction terms can be added to the design formula, in order to test, for example,
#if the log2 fold change attributable to a given condition is different based on another
#factor, for example if the condition effect differs across genotype.
# Now filtering by padj value < 0.05 ----
WT_Dex_v_Starve_pH_7_sig = WT_Dex_v_Starve_pH_7[WT_Dex_v_Starve_pH_7$padj < 0.05,]
WT_DEX_v_starve_pH_5_sig = WT_Dex_v_Starve_pH_5[WT_Dex_v_Starve_pH_5$padj < 0.05,]
dQ_snf5_Dex_v_Starve_pH_5_sig = dQ_snf5_Dex_v_Starve_pH_5[dQ_snf5_Dex_v_Starve_pH_5$padj < 0.05,]
Null_Dex_v_Starve_sig = Null_Dex_v_Starve[Null_Dex_v_Starve$padj < 0.05,]
HtoA_snf5_Dex_v_Starve_pH_5_sig = HtoA_snf5_Dex_v_Starve_pH_5[HtoA_snf5_Dex_v_Starve_pH_5$padj < 0.05,]
#filter log2FC over 1 (two-fold) ----
WT_Dex_v_Starve_pH_7_sig = WT_Dex_v_Starve_pH_7[abs(WT_Dex_v_Starve_pH_7$log2FoldChange) > 1,]
WT_DEX_v_starve_pH_5_sig = WT_Dex_v_Starve_pH_5[abs(WT_Dex_v_Starve_pH_5$log2FoldChange) > 1,]
dQ_snf5_Dex_v_Starve_pH_5_sig = dQ_snf5_Dex_v_Starve_pH_5[abs(dQ_snf5_Dex_v_Starve_pH_5$log2FoldChange) > 1,]
Null_Dex_v_Starve_sig = Null_Dex_v_Starve[abs(Null_Dex_v_Starve$log2FoldChange) > 1,]
HtoA_snf5_Dex_v_Starve_pH_5_sig = HtoA_snf5_Dex_v_Starve_pH_5[abs(HtoA_snf5_Dex_v_Starve_pH_5$log2FoldChange) > 1,]
# Writing the list to CSV ----
write.table(as.data.frame(WT_Dex_v_Starve_pH_7_sig), file="WT_Dex_v_Starve_pH_7_sig.txt", sep ="\t")
write.table(as.data.frame(WT_DEX_v_starve_pH_5_sig), file="WT_DEX_v_starve_pH_5_sig.txt", sep ="\t")
write.table(as.data.frame(dQ_snf5_Dex_v_Starve_pH_5_sig), file="dQ_snf5_Dex_v_Starve_pH_5_sig.txt", sep ="\t")
write.table(as.data.frame(Null_Dex_v_Starve_sig), file="Null_Dex_v_Starve_sig.txt", sep ="\t")
write.table(as.data.frame(HtoA_snf5_Dex_v_Starve_pH_5_sig), file="HtoA_snf5_Dex_v_Starve_pH_5_sig.txt", sep ="\t")
#WT_Dex_v_Starve_pH_5$padj < 0.1, na.rm=TRUE)
#DESeq2 differential gene expression analysis
#Assuming you ran Kallisto_to_DESeq2_prepare.R
# Currently not a function
dds = readRDS('dds.rda')
sampledata = readRDS('sampledata.rda')
# Create Wald Test contrasts ----
WT_Dex_v_Starve_pH_7 = results(dds, contrast=c("Condition","WT_Dex", "WT_Stv_pH7"))
WT_Dex_v_Starve_pH_5 = results(dds, contrast=c("Condition","WT_Dex", "WT_Stv_pH5"))
dQ_snf5_Dex_v_Starve_pH_5 = results(dds, contrast=c("Condition","dQ_snf5_Dex", "dQ_snf5_Stv_pH5" ))
Null_Dex_v_Starve = results(dds, contrast=c("Condition","Null_Dex", "Null_Stv_pH5"))
HtoA_snf5_Dex_v_Starve_pH_5 = results(dds, contrast=c("Condition","HtoA_snf5_Dex", "HtoA_snf5_Stv_pH5"))
#now ordering them from greatest to least FC difference ----
WT_Dex_v_Starve_pH_7 = WT_Dex_v_Starve_pH_7[order(WT_Dex_v_Starve_pH_7$padj),]
WT_Dex_v_Starve_pH_5 = WT_Dex_v_Starve_pH_5[order(WT_Dex_v_Starve_pH_5$padj),]
dQ_snf5_Dex_v_Starve_pH_5 = dQ_snf5_Dex_v_Starve_pH_5[order(dQ_snf5_Dex_v_Starve_pH_5$padj),]
Null_Dex_v_Starve = Null_Dex_v_Starve[order(Null_Dex_v_Starve$padj),]
HtoA_snf5_Dex_v_Starve_pH_5 = HtoA_snf5_Dex_v_Starve_pH_5[order(HtoA_snf5_Dex_v_Starve_pH_5$padj),]
#Can also use interactions: Interaction terms can be added to the design formula, in order to test, for example,
#if the log2 fold change attributable to a given condition is different based on another
#factor, for example if the condition effect differs across genotype.
# Now filtering by padj value < 0.05 ----
WT_Dex_v_Starve_pH_7_sig = WT_Dex_v_Starve_pH_7[WT_Dex_v_Starve_pH_7$padj < 0.05,]
WT_DEX_v_starve_pH_5_sig = WT_Dex_v_Starve_pH_5[WT_Dex_v_Starve_pH_5$padj < 0.05,]
dQ_snf5_Dex_v_Starve_pH_5_sig = dQ_snf5_Dex_v_Starve_pH_5[dQ_snf5_Dex_v_Starve_pH_5$padj < 0.05,]
Null_Dex_v_Starve_sig = Null_Dex_v_Starve[Null_Dex_v_Starve$padj < 0.05,]
HtoA_snf5_Dex_v_Starve_pH_5_sig = HtoA_snf5_Dex_v_Starve_pH_5[HtoA_snf5_Dex_v_Starve_pH_5$padj < 0.05,]
#filter log2FC over 1 (two-fold) ----
WT_Dex_v_Starve_pH_7_sig = WT_Dex_v_Starve_pH_7[abs(WT_Dex_v_Starve_pH_7$log2FoldChange) > 1,]
WT_DEX_v_starve_pH_5_sig = WT_Dex_v_Starve_pH_5[abs(WT_Dex_v_Starve_pH_5$log2FoldChange) > 1,]
dQ_snf5_Dex_v_Starve_pH_5_sig = dQ_snf5_Dex_v_Starve_pH_5[abs(dQ_snf5_Dex_v_Starve_pH_5$log2FoldChange) > 1,]
Null_Dex_v_Starve_sig = Null_Dex_v_Starve[abs(Null_Dex_v_Starve$log2FoldChange) > 1,]
HtoA_snf5_Dex_v_Starve_pH_5_sig = HtoA_snf5_Dex_v_Starve_pH_5[abs(HtoA_snf5_Dex_v_Starve_pH_5$log2FoldChange) > 1,]
#Results path
results_path = '/Users/HoltLab/Documents/R/Experiments/RNA_seq_ADH2_Nacho_12.28.17/Results/DESeq2/Sig_Dif_expressed_genes/'
# Writing the list to CSV ----
write.table(as.data.frame(WT_Dex_v_Starve_pH_7_sig), file = paste(results_path,"WT_Dex_v_Starve_pH_7_sig.txt", sep = ""), sep ="\t")
write.table(as.data.frame(WT_DEX_v_starve_pH_5_sig), file= paste(results_path, "WT_DEX_v_starve_pH_5_sig.txt", sep = ""), sep ="\t")
write.table(as.data.frame(dQ_snf5_Dex_v_Starve_pH_5_sig), file= paste(results_path, "dQ_snf5_Dex_v_Starve_pH_5_sig.txt", sep = ""), sep ="\t")
write.table(as.data.frame(Null_Dex_v_Starve_sig), file= paste(results_path, "Null_Dex_v_Starve_sig.txt", sep = ""), sep ="\t")
write.table(as.data.frame(HtoA_snf5_Dex_v_Starve_pH_5_sig), file= paste(results_path, "HtoA_snf5_Dex_v_Starve_pH_5_sig.txt", sep = ""), sep ="\t")
summary(WT_Dex_v_Starve_pH_7)
summary(WT_Dex_v_Starve_pH_5)
summary(dQ_snf5_Dex_v_Starve_pH_5)
help("results")
#DESeq2 differential gene expression analysis
#Assuming you ran Kallisto_to_DESeq2_prepare.R
# Currently not a function
dds = readRDS('dds.rda')
sampledata = readRDS('sampledata.rda')
# Create Wald Test contrasts ----
WT_Dex_v_Starve_pH_7 = results(dds, contrast=c("Condition","WT_Dex", "WT_Stv_pH7"), alpha = 0.05)
WT_Dex_v_Starve_pH_5 = results(dds, contrast=c("Condition","WT_Dex", "WT_Stv_pH5"), alpha = 0.05)
dQ_snf5_Dex_v_Starve_pH_5 = results(dds, contrast=c("Condition","dQ_snf5_Dex", "dQ_snf5_Stv_pH5" ), alpha = 0.05)
Null_Dex_v_Starve = results(dds, contrast=c("Condition","Null_Dex", "Null_Stv_pH5"), alpha = 0.05)
HtoA_snf5_Dex_v_Starve_pH_5 = results(dds, contrast=c("Condition","HtoA_snf5_Dex", "HtoA_snf5_Stv_pH5"), alpha = 0.05)
#now ordering them from greatest to least FC difference ----
WT_Dex_v_Starve_pH_7 = WT_Dex_v_Starve_pH_7[order(WT_Dex_v_Starve_pH_7$padj),]
WT_Dex_v_Starve_pH_5 = WT_Dex_v_Starve_pH_5[order(WT_Dex_v_Starve_pH_5$padj),]
dQ_snf5_Dex_v_Starve_pH_5 = dQ_snf5_Dex_v_Starve_pH_5[order(dQ_snf5_Dex_v_Starve_pH_5$padj),]
Null_Dex_v_Starve = Null_Dex_v_Starve[order(Null_Dex_v_Starve$padj),]
HtoA_snf5_Dex_v_Starve_pH_5 = HtoA_snf5_Dex_v_Starve_pH_5[order(HtoA_snf5_Dex_v_Starve_pH_5$padj),]
#Can also use interactions: Interaction terms can be added to the design formula, in order to test, for example,
#if the log2 fold change attributable to a given condition is different based on another
#factor, for example if the condition effect differs across genotype.
# Now filtering by padj value < 0.05 ----
WT_Dex_v_Starve_pH_7_sig = WT_Dex_v_Starve_pH_7[WT_Dex_v_Starve_pH_7$padj < 0.05,]
WT_DEX_v_starve_pH_5_sig = WT_Dex_v_Starve_pH_5[WT_Dex_v_Starve_pH_5$padj < 0.05,]
dQ_snf5_Dex_v_Starve_pH_5_sig = dQ_snf5_Dex_v_Starve_pH_5[dQ_snf5_Dex_v_Starve_pH_5$padj < 0.05,]
Null_Dex_v_Starve_sig = Null_Dex_v_Starve[Null_Dex_v_Starve$padj < 0.05,]
HtoA_snf5_Dex_v_Starve_pH_5_sig = HtoA_snf5_Dex_v_Starve_pH_5[HtoA_snf5_Dex_v_Starve_pH_5$padj < 0.05,]
#filter log2FC over 1 (two-fold) ----
WT_Dex_v_Starve_pH_7_sig = WT_Dex_v_Starve_pH_7[abs(WT_Dex_v_Starve_pH_7$log2FoldChange) > 1,]
WT_DEX_v_starve_pH_5_sig = WT_Dex_v_Starve_pH_5[abs(WT_Dex_v_Starve_pH_5$log2FoldChange) > 1,]
dQ_snf5_Dex_v_Starve_pH_5_sig = dQ_snf5_Dex_v_Starve_pH_5[abs(dQ_snf5_Dex_v_Starve_pH_5$log2FoldChange) > 1,]
Null_Dex_v_Starve_sig = Null_Dex_v_Starve[abs(Null_Dex_v_Starve$log2FoldChange) > 1,]
HtoA_snf5_Dex_v_Starve_pH_5_sig = HtoA_snf5_Dex_v_Starve_pH_5[abs(HtoA_snf5_Dex_v_Starve_pH_5$log2FoldChange) > 1,]
#Results path
results_path = '/Users/HoltLab/Documents/R/Experiments/RNA_seq_ADH2_Nacho_12.28.17/Results/DESeq2/Sig_Dif_expressed_genes/'
# Writing the list to CSV ----
write.table(as.data.frame(WT_Dex_v_Starve_pH_7_sig), file = paste(results_path,"WT_Dex_v_Starve_pH_7_sig.txt", sep = ""), sep ="\t")
write.table(as.data.frame(WT_DEX_v_starve_pH_5_sig), file= paste(results_path, "WT_DEX_v_starve_pH_5_sig.txt", sep = ""), sep ="\t")
write.table(as.data.frame(dQ_snf5_Dex_v_Starve_pH_5_sig), file= paste(results_path, "dQ_snf5_Dex_v_Starve_pH_5_sig.txt", sep = ""), sep ="\t")
write.table(as.data.frame(Null_Dex_v_Starve_sig), file= paste(results_path, "Null_Dex_v_Starve_sig.txt", sep = ""), sep ="\t")
write.table(as.data.frame(HtoA_snf5_Dex_v_Starve_pH_5_sig), file= paste(results_path, "HtoA_snf5_Dex_v_Starve_pH_5_sig.txt", sep = ""), sep ="\t")
summary('WT_Dex_v_Starve_pH_7')
summary('WT_Dex_v_Starve_pH_5')
summary('dQ_snf5_Dex_v_Starve_pH_5')
summary('Null_Dex_v_Starve')
summary('HtoA_snf5_Dex_v_Starve_pH_5')
summary('WT_Dex_v_Starve_pH_7')
summary(WT_Dex_v_Starve_pH_7)
summary(WT_Dex_v_Starve_pH_5)
summary(dQ_snf5_Dex_v_Starve_pH_5)
summary(Null_Dex_v_Starve)
summary(HtoA_snf5_Dex_v_Starve_pH_5)
